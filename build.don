valgrind = false
gdb = [gdb -q --args]

fn compile(datadir:@data/, extraflags:[], linkflags:[], optimize:false)
{
    ofiles = cc(@src/*.c,
                flags:[-DDATADIR=\"$datadir\"
                       $(valgrind ? '-DVALGRIND' : '-DNVALGRIND')
                       -ggdb3 -rdynamic -std=c89 -pedantic
                       -Wno-error=unused-parameter -Wno-error=unused-variable
                       -Wno-error=unused-function -Wall -Wextra -Wformat-security
                       -Winit-self -Wmissing-include-dirs -Wswitch-enum
                       -Wsync-nand -Wunused -Wstrict-overflow=5 -Wfloat-equal
                       -Wundef -Wshadow -Wunsafe-loop-optimizations
                       -Wbad-function-cast -Wc++-compat -Wcast-align
                       -Wwrite-strings -Wconversion -Wlogical-op
                       -Waggregate-return -Wstrict-prototypes
                       -Wold-style-definition -Wmissing-prototypes
                       -Wmissing-declarations -Wmissing-noreturn
                       -Wmissing-format-attribute -Wnormalized=nfc -Wpacked
                       -Wpacked-bitfield-compat -Wredundant-decls
                       -Wnested-externs -Wunreachable-code
                       -Wno-error=unreachable-code -Winline -Winvalid-pch
                       -Wno-missing-field-initializers
                       -Wdisabled-optimization -Wstack-protector -pipe
                       -march=native]::(optimize ? [-O2] : [-DDEBUG -O0])::extraflags)
    return link(ofiles, flags:linkflags, name:'don')
}

fn run(command..., output:true)
{
    if valgrind
    {
        logfile = @valgrind-log
        out exitcode = exec(command:[valgrind -q --leak-check=full --show-reachable=yes
                                     --log-file=$logfile --num-callers=100]::command,
                            env:list('XDG_CACHE_HOME', @tempcache),
                            fail:false, echo:output, echoStderr:output)
        log = read(logfile)
        rm(logfile)
        if (exitcode != 0 || contains(log, '** Assertion failed')) && !contains(log, '== Process terminating')
        {
            l = lines(log)
            log = ''
            copy = false
            for line in l
            {
                if startsWith(line, '*')
                {
                    log = "$log$line\n"
                    copy = false
                }
                else
                {
                    if contains(line, '==    ') && copy
                    {
                        log = "$log$line\n"
                    }
                    else
                    {
                        if contains(line, 'VALGRIND_PRINTF_BACKTRACE')
                        {
                            log = "$log$line\n"
                            copy = true
                        }
                        else
                        {
                            copy = false
                        }
                    }
                }
            }
        }
        out = list(out[0], "$(out[1])$log")
        if output && log != ''
        {
            echo(log)
        }
    }
    else
    {
        out exitcode = exec(command, env:list('XDG_CACHE_HOME', @tempcache),
                            fail:false, echo:output, echoStderr:output)
    }
    return out exitcode
}

fn dotest(program, debug:false)
{
    passcount = 0
    failcount = 0
    hasOutput = false
    for f in @test/*
    {
        test = read(f)
        targets = [default]
        expected = null
        if test[0] == '#'
        {
            lines = split(test, "\n")
            command = split(lines[0], ' ')
            if command[0] == '#fail:'
            {
                expected = ''
                maxFailLine = 1
                while maxFailLine < size(lines) && size(lines[maxFailLine]) && lines[maxFailLine][0] == '#'
                {
                    maxFailLine += 1
                }
                for i in 1..maxFailLine-1
                {
                    line = lines[i][1..size(lines[i])-1]
                    if line[0] == '+'
                    {
                        j = indexOf(line, ':')
                        line = "$(filename(f)):$(maxFailLine+int(line[1..j-1]))$(line[j..size(line)-1])"
                    }
                    expected = "$expected$line\n"
                    i += 1
                }
            }
            else if command[0] == '#target:'
            {
                targets = []
                i = 1
                while i < size(command)
                {
                    targets = targets::list(command[i])
                    i += 1
                }
            }
            else
            {
                fail("Unknown command \"$(command[0])\" while parsing $f")
            }
        }

        result = true
        i = 0
        rm(@tempcache)
        while result && i < size(targets)
        {
            out exitcode = run(command:[$program -f $f $(targets[i])], output:false)
            if expected ? exitcode && out[0] == '' && out[1] == expected : exitcode == 0 && out[0] == "PASS\n" && out[1] == ''
            {
                i += 1
            }
            else
            {
                result = false
                if hasOutput
                {
                    echo('')
                }
                echo("FAIL: $(filename(f))$(size(targets) > 1 || targets[i] != 'default' ? ":$(targets[i])" : '')")
                hasOutput = out[0] != '' || out[1] != ''
                if hasOutput
                {
                    if out[0]
                    {
                        echo(out[0], prefix:'> ')
                    }
                    if out[1]
                    {
                        echo(out[1], prefix:'> ')
                    }
                }
                if debug
                {
                    rm(@tempcache)
                    j = 0
                    while j < i
                    {
                        exec(command:[$program -f $f $(targets[j])], fail:false, echo:false, echoStderr:false,
                             env:list('XDG_CACHE_HOME', @tempcache))
                        j += 1
                    }
                    exec(command:[$gdb $program -f $f $(targets[j])], fail:false,
                         env:list('XDG_CACHE_HOME', @tempcache))
                }
            }
        }
        if result
        {
            passcount += 1
        }
        else
        {
            failcount += 1
        }
    }
    if failcount
    {
        echo('')
    }
    echo("pass:  $passcount")
    echo("fail:  $failcount")
    if failcount
    {
        fail(silent:true)
    }
}

target test
{
    dotest(compile(linkflags:[-static]))
}

target vtest
{
    valgrind = true
    dotest(compile())
}

target dbgtest
{
    dotest(compile(), debug:true)
}

target covtest
{
    dotest(compile(extraflags:[--coverage], linkflags:[--coverage]))
}

target default
{
    valgrind = true
    p = compile()
    out exitcode = run(command:[$p -f input.don])
    if exitcode
    {
        fail()
    }
}

target gimp
{
    valgrind = true
    p = compile()
    out exitcode = run(command:[$p -f gimp/build.don])
    if exitcode
    {
        fail()
    }
}

target prof
{
    p = compile(optimize:true, linkflags:[-static])
    exec(command:[valgrind -q --tool=callgrind --cache-sim=yes --branch-sim=yes
                  --collect-systime=yes --dump-instr=yes --collect-jumps=yes $p -f input.don],
         env:list('XDG_CACHE_HOME', @tempcache))
}

target gprof
{
    p = compile(extraflags:[-pg], linkflags:[-pg], optimize:true)
    out exitcode = run(command:[$p -f input.don])
    if exitcode
    {
        fail()
    }
    exec(command:[gprof $p])
}

target strace
{
    valgrind = false
    p = compile()
    out exitcode = run(command:[strace -qvCf -b execve $p -f input.don])
    if exitcode
    {
        fail()
    }
}

target debug
{
    p = compile()
    exec(command:[gdb $p -f input.don], env:list('XDG_CACHE_HOME', @tempcache))
}

target disasm
{
    p = compile(optimize:true)
    exec(command:[objdump -d $p])
}

target install
{
    p = compile('/usr/local/share/don/', optimize:true)
    exec(command:[rm -f $(@/usr/local/bin/don)])
    exec(command:[rm -rf $(@/usr/local/share/don)])
    exec(command:[mkdir $(@/usr/local/share/don/)])
    exec(command:[cp $p $(@/usr/local/bin/)])
    exec(command:[cp $(@data/don.don) $(@/usr/local/share/don/)])
}

target b
{
    ofiles = cc(@test.c,
                flags:[-ggdb3 -rdynamic
                       -Wno-error=unused-parameter -Wno-error=unused-variable
                       -Wno-error=unused-function -Wall -Wformat=2
                       -Winit-self -Wmissing-include-dirs -Wswitch-enum
                       -Wsync-nand -Wstrict-overflow=5 -Wfloat-equal
                       -Wundef -Wshadow -Wunsafe-loop-optimizations
                       -Wbad-function-cast -Wc++-compat -Wcast-align
                       -Wwrite-strings -Wconversion -Wlogical-op
                       -Waggregate-return -Wstrict-prototypes
                       -Wold-style-definition -Wmissing-prototypes
                       -Wmissing-declarations -Wmissing-noreturn
                       -Wmissing-format-attribute -Wnormalized=nfc -Wpacked
                       -Wpacked-bitfield-compat -Wredundant-decls
                       -Wnested-externs -Wunreachable-code
                       -Wno-error=unreachable-code -Winline -Winvalid-pch
                       -Wdisabled-optimization -Wstack-protector -pipe
                       -march=native -O2 -Wno-multichar])
    p = link(ofiles, name:'test')
    exec('time', p, 0)
#    exec('time', p, 1)
#    exec('time', p, 3)
#    exec('time', p, 7)
#    exec('time', p, 15)
#    exec('time', p, 31)
#    exec('time', p, 63)
#    exec('time', p, 127)
#    exec('time', p, 255)
#    exec('time', p, 511)
#    exec('time', p, 1023)
#    exec('time', p, 2047)
#    exec('time', p, 4095)
#    exec('time', p, 8191)
#    exec('time', p, 16383)
#    exec('time', p, 32767)
#    exec('time', p, 65535)
#    exec('time', p, 131071)
#    exec('time', p, 262143)
#    exec('time', p, 524287)
#    exec('time', p, 1048575)
}

target benchmark
{
    p = compile(optimize:true)
    rm(@tempcache)
#    exec(command:[cp -a tempcache2 tempcache])
#    run(command:[time strace $p -f benchmark/build.don])
#    run(command:[time $p -f benchmark/build.don partial])
#    run(command:[time valgrind -q $p -f benchmark/build.don])
#    run(command:[time gdb --args $p -f benchmark/build.don])
    run(command:[time $p -f benchmark/build.don])
    run(command:[time $p -f benchmark/build.don])
}

target benchmarkprof
{
    p = compile(optimize:true)
    rm(@tempcache)
#    exec(command:[cp -a tempcache2 tempcache])
    run(command:[time valgrind -q --tool=callgrind --cache-sim=yes --branch-sim=yes --collect-systime=yes --dump-instr=yes --collect-jumps=yes $p -f benchmark/build.don partial])
    run(command:[time $p -f benchmark/build.don partial])
}
