valgrind = false
gdb = {"gdb" "-q" "--args"}

compile(extraflags:{} linkflags:{})
   ofiles = cc(@src/*.c flags:{"-DDEBUG" valgrind ? "-DVALGRIND" : "-DNVALGRIND" "-O0" "-ggdb3" "-rdynamic" "-std=c89" "-pedantic" "-Werror" "-Wno-error=unused-parameter" "-Wno-error=unused-variable" "-Wno-error=unused-function" "-Wall" "-Wextra" "-Wformat=2" "-Winit-self" "-Wmissing-include-dirs" "-Wswitch-enum" "-Wsync-nand" "-Wunused" "-Wstrict-overflow=1" "-Wfloat-equal" "-Wundef" "-Wshadow" "-Wunsafe-loop-optimizations" "-Wbad-function-cast" "-Wc++-compat" "-Wcast-align" "-Wwrite-strings" "-Wconversion" "-Wlogical-op" "-Waggregate-return" "-Wstrict-prototypes" "-Wold-style-definition" "-Wmissing-prototypes" "-Wmissing-declarations" "-Wmissing-noreturn" "-Wmissing-format-attribute" "-Wnormalized=nfc" "-Wpacked" "-Wpacked-bitfield-compat" "-Wredundant-decls" "-Wnested-externs" "-Wunreachable-code" "-Wno-error=unreachable-code" "-Winline" "-Winvalid-pch" "-Wdisabled-optimization" "-Wstack-protector" "-pipe" "-march=native"}::extraflags)
   return link(ofiles flags:linkflags name:"don")

run(args... output:true)
   if valgrind
      logfile = @valgrind-log
      out exitcode = exec("valgrind" "-q" "--leak-check=full" "--show-reachable=yes" "--log-file="logfile args env:{"XDG_CACHE_HOME" "tempcache"} fail:false echo:output echoStderr:output)
      log = read(logfile)
      rm(logfile)
      if (exitcode != 0 || contains(log "** Assertion failed")) && !contains(log "== Process terminating")
         l = lines(log)
         log = ""
         copy = false
         for line in l
            if startsWith(line "*")
               log = log""line"\n"
               copy = false
            else
               if contains(line "==    ") && copy
                  log = log""line"\n"
               else
                  if contains(line "VALGRIND_PRINTF_BACKTRACE")
                     log = log""line"\n"
                     copy = true
                  else
                     copy = false
      out = {out[0] out[1]""log}
      if output && log != ""
         echo(log)
   else
      out exitcode = exec(args env:{"XDG_CACHE_HOME" "tempcache"} fail:false echo:output echoStderr:output)
   return out exitcode

dotest(debug:false)
   program = compile()
   pass = 0
   fail = 0
   hasOutput = false
   for f in @test/*
      out exitcode = run(program "-i" f output:false)
      if exitcode || out[0] != "PASS\n" || out[1] != ""
         fail += 1
         if hasOutput
            echo("")
         echo("FAIL: "filename(f))
         hasOutput = out[0] != "" || out[1] != ""
         if hasOutput
            if out[0]
               echo(out[0] prefix:"> ")
            if out[1]
               echo(out[1] prefix:"> ")
         if debug
            exec(gdb program "-i" f fail:false env:{"XDG_CACHE_HOME" "tempcache"})
      else
         pass += 1
   if fail
      echo("")
   echo("pass:  "pass)
   echo("fail:  "fail)
   fail(condition:fail silent:true)

test:
   dotest()

vtest:
   valgrind = true
   dotest()

dbgtest:
   dotest(debug:true)

default:
   valgrind = true
   out exitcode = run(compile() "-i" "input")
   fail(condition:exitcode)

prof:
   p = compile()
   out exitcode = run(compile(extraflags:{"-pg"} linkflags:{"-pg"}) "-i" "input")
   fail(condition:exitcode)
   exec("gprof" p)

strace:
   valgrind = false
   out exitcode = run("strace" "-qvC" compile() "-i" "input")
   fail(condition:exitcode)

debug:
   program = compile()
   exec(gdb program "-i" "input" env:{"XDG_CACHE_HOME" "tempcache"})

install:
   program = compile(extraflags:{"-DDATADIR=\"/usr/local/share/don/\""})
   exec("rm" "-f" @/usr/local/bin/don)
   exec("rm" "-rf" @/usr/local/share/don)
   exec("mkdir" @/usr/local/share/don/)
   exec("cp" program @/usr/local/bin/)
   exec("cp" @data/don.don @/usr/local/share/don/)
