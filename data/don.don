cat(file)
   echo(readFile(file))

contains(data, element)
   return indexOf(data, element) != null

cp(src, dst)
   native.cp(src, dst)

echo(message, prefix = null)
   native.echo(message, prefix)

exec(command..., env = [], failOnError = true, echo = true, echoStderr = true, access = @/, modify = @/)
   output, exitcode = native.exec(command, env, echo, echoStderr, fileset(access), fileset(modify))
   if failOnError && exitcode != 0
      if exitcode == -1
         fail("Command not found: " command[0])
      fail("Process exited with status " exitcode)
   return output, exitcode

fail(message = null, condition = true, silent = false)
   if condition
      if silent
         native.fail(null)
      message = message == null ? "" : "" message
      if message != ""
         native.fail("BUILD FAILED: " message)
      native.fail("BUILD FAILED")

file(path, name, extension = null)
   return native.file(path, name, extension)

filename(path)
   return native.filename(path)

fileset(value)
   return native.fileset(value)

getCache(label, version, key..., echoCachedOutput = true)
   cacheFile, uptodate = native.getCache([label, version, key], echoCachedOutput)
   return cacheFile, uptodate

getenv(name)
   return native.getenv(name)

indexOf(data, element)
   return native.indexOf(data, element)

lines(value, trimEmptyLastLine = true)
   return native.lines(value, trimEmptyLastLine)

mv(src, dst)
   native.mv(src, dst)

readFile(file)
   return native.readFile(file)

replace(data, original, replacement)
   result, count = native.replace(data, original, replacement)
   return result, count

rm(file)
   native.rm(file)

setUptodate(cacheFile, output, accessedFiles = [])
   native.setUptodate(cacheFile, output[0], output[1], fileset(accessedFiles))

sign(n)
   return n > 0 ? 1 : n ? -1 : 0

size(value)
   return native.size(value)

split(value, delimiter = " ", removeEmpty = false)
   return native.split(value, delimiter, removeEmpty)

sum(n...)
   result = 0
   for i in n
      result += i
   return result

startsWith(data, element)
   return indexOf(data, element) == 0


cc(files..., flags = [])
   result = []
   failed = false
   env = [getenv("LANG"), getenv("LC_CTYPE"), getenv("LC_MESSAGES"), getenv("LC_ALL"), getenv("GCC_EXEC_PREFIX"), getenv("COMPILER_PATH"), getenv("LIBRARY_PATH"), getenv("CPATH"), getenv("C_INCLUDE_PATH"), getenv("CPLUS_INCLUDE_PATH"), getenv("OBJC_INCLUDE_PATH")]
   for f in fileset(files)
      cache, uptodate = getCache("cc", 0, f, flags, env)
      ofile = file(cache, filename(f), "o")
      if !uptodate
         dependFile = file(cache, filename(f), "d")
         out, exitcode = exec("cc", "-c", "-MD", "-MF", dependFile, "-o", ofile, flags, f, failOnError:false, modify:[dependFile, ofile])
         if exitcode
            failed = true
         else
            depend = readFile(dependFile)
            depend = depend[indexOf(depend, ": ") + 2 .. size(depend) - 2]
            depend = replace(depend, "\\\n", "")
            depend = split(depend, removeEmpty:true)
            setUptodate(cache, out, accessedFiles:fileset(depend))
      result = result::[ofile]
   fail(condition:failed)
   return result

link(files..., name = "a.out")
   files = fileset(files)
   env = [getenv("LANG"), getenv("LC_CTYPE"), getenv("LC_MESSAGES"), getenv("LC_ALL"), getenv("GCC_EXEC_PREFIX"), getenv("COMPILER_PATH"), getenv("LIBRARY_PATH"), getenv("CPATH"), getenv("C_INCLUDE_PATH"), getenv("CPLUS_INCLUDE_PATH"), getenv("OBJC_INCLUDE_PATH")]
   cache, uptodate = getCache("link", 0, files, env)
   program = file(cache, name)
   if !uptodate
      out, exitcode = exec("cc", "-o", program, files, modify:program)
      setUptodate(cache, out, accessedFiles:files)
   return program
