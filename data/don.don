fn cat(filename)
{
    echo(read(filename))
}

fn contains(data, element)
{
    return indexOf(data, element) != null
}

fn cp(src, dst)
{
    native.cp(src, dst)
}

fn echo(message, prefix:null)
{
    native.echo(message, prefix)
}

fn env(name)
{
    return native.getEnv(name)
}

fn exec(command..., env:[], fail:true, echo:true, echoStderr:true, access:@/, modify:@/)
{
    result = native.exec(command, env, echo, echoStderr, fail, filelist(access), filelist(modify))
    stdout = result[0]
    stderr = result[1]
    exitcode = result[2]
    return list(stdout, stderr) exitcode
}

fn fail(message:null, silent:false)
{
    if silent
    {
        native.fail(null)
    }
    message = message == null ? '' : "$message"
    if message != ''
    {
        native.fail("BUILD FAILED: $message")
    }
    native.fail('BUILD FAILED')
}

fn file(path, name:null, extension:null)
{
    if name == null
    {
        if path == null
        {
            fail('Either path or name must be non-null')
        }
        name = path
        path = null
    }
    return native.file(path, name, extension)
}

fn filename(path)
{
    return native.filename(path)
}

fn filelist(value)
{
    return native.filelist(value)
}

fn getCache(label, version, key..., echoCachedOutput:true)
{
    result = native.getCache(list(label, version, key), echoCachedOutput)
    return result[0] result[1] result[2]
}

fn indexOf(data, element)
{
    return native.indexOf(data, element)
}

fn int(str)
{
    n = 0
    for i in 0..size(str)-1
    {
        n = n*10 + indexOf('0123456789', str[i])
    }
    return n
}

fn lines(value, trimLastIfEmpty:true)
{
    return native.lines(value, trimLastIfEmpty)
}

fn mkdir(path)
{
    exec('mkdir', '-p', path, access:[], modify:path)
}

fn mv(src, dst)
{
    native.mv(src, dst)
}

fn pid()
{
    return native.pid()
}

fn read(filename, valueIfNotExists:null)
{
    return native.readFile(file(filename), valueIfNotExists)
}

fn replace(data, original, replacement)
{
    result = native.replace(data, original, replacement)
    return result[0] result[1]
}

fn rm(filename)
{
    native.rm(filename)
}

fn setUptodate(cacheFile, output:'', data:'', accessedFiles:[])
{
    native.setUptodate(cacheFile, output, data, filelist(accessedFiles))
}

fn sign(n)
{
    return n > 0 ? 1 : n ? -1 : 0
}

fn size(value)
{
    return native.size(value)
}

fn split(value, delimiter:list(' ', "\n"), removeEmpty:false)
{
    return native.split(value, delimiter, removeEmpty)
}

fn sum(n...)
{
    result = 0
    for i in n
    {
        result += i
    }
    return result
}

fn startsWith(data, element)
{
    return indexOf(data, element) == 0
}

fn write(filename, data)
{
    native.writeFile(file(filename), data)
}

fn cc(files..., flags:[], include:[], sysinclude:[])
{
    result = []
    failed = false
    env = list(env('LANG'), env('LC_CTYPE'), env('LC_MESSAGES'), env('LC_ALL'),
               env('GCC_EXEC_PREFIX'), env('COMPILER_PATH'), env('LIBRARY_PATH'),
               env('CPATH'), env('C_INCLUDE_PATH'), env('CPLUS_INCLUDE_PATH'),
               env('OBJC_INCLUDE_PATH'))
    for i in include
    {
        flags = flags::list('-iquote', i)
    }
    for i in sysinclude
    {
        flags = flags::list('-isystem', i)
    }
    for f in filelist(files)
    {
        cache uptodate = getCache('cc', 0, f, flags, env)
        ofile = file(cache, filename(f), 'o')
        if !uptodate
        {
            dependFile = file(cache, filename(f), 'd')
            out exitcode = exec('cc', '-c', '-MD', '-MF', dependFile, '-o', ofile, flags, f, fail:false, modify:list(dependFile, ofile))
            if exitcode
            {
                failed = true
            }
            else
            {
                depend = read(dependFile)
                depend = depend[indexOf(depend, ': ') + 2 .. size(depend) - 2]
                depend = replace(depend, "\\\n", '')
                depend = split(depend, delimiter:' ', removeEmpty:true)
                rm(dependFile)
                setUptodate(cache, "$(out[0])$(out[1])", accessedFiles:filelist(depend))
            }
        }
        result = result::list(ofile)
    }
    if failed
    {
        fail()
    }
    return result
}

fn link(files..., flags:[], libs:[], name:'a.out')
{
    files = filelist(files)
    env = list(env('LANG'), env('LC_CTYPE'), env('LC_MESSAGES'), env('LC_ALL'),
               env('GCC_EXEC_PREFIX'), env('COMPILER_PATH'), env('LIBRARY_PATH'),
               env('CPATH'), env('C_INCLUDE_PATH'), env('CPLUS_INCLUDE_PATH'),
               env('OBJC_INCLUDE_PATH'))
    libargs = []
    for l in libs
    {
        libargs = libargs::[-l$l]
    }
    cache uptodate = getCache('link', 0, files, flags, libs, env)
    program = file(cache, name)
    if !uptodate
    {
        out exitcode = exec('cc', '-o', program, files, flags, libargs, modify:program)
        setUptodate(cache, "$(out[0])$(out[1])", accessedFiles:files)
    }
    return program
}
